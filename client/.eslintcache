[{"/home/khushi/Desktop/whatsapp_clone-main/client/src/App.js":"1","/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ProfileSection/ProfileSection.js":"2","/home/khushi/Desktop/whatsapp_clone-main/client/src/utils/apiEndpoints.js":"3","/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ChatForm/ChatForm.js":"4","/home/khushi/Desktop/whatsapp_clone-main/client/src/index.js":"5","/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ChatCardsListing/ChatCardsListing.js":"6","/home/khushi/Desktop/whatsapp_clone-main/client/src/utils/apiRequests.js":"7","/home/khushi/Desktop/whatsapp_clone-main/client/src/context/SocketContext.js":"8"},{"size":4851,"mtime":1612952761000,"results":"9","hashOfConfig":"10"},{"size":607,"mtime":1612952761000,"results":"11","hashOfConfig":"10"},{"size":360,"mtime":1612952761000,"results":"12","hashOfConfig":"10"},{"size":3541,"mtime":1654971904046,"results":"13","hashOfConfig":"10"},{"size":500,"mtime":1612952761000,"results":"14","hashOfConfig":"10"},{"size":1883,"mtime":1612952761000,"results":"15","hashOfConfig":"10"},{"size":924,"mtime":1612952761000,"results":"16","hashOfConfig":"10"},{"size":102,"mtime":1612952761000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"1c36xtc",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/khushi/Desktop/whatsapp_clone-main/client/src/App.js",["38","39","40","41"],"import logo from \"./logo.svg\";\nimport { useReducer, useState, useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport \"./App.scss\";\nimport ProfileSection from \"./component/ProfileSection/ProfileSection\";\nimport SearchPeople from \"./component/SearchPeople/SearchPeople\";\nimport ChatCardsListing from \"./component/ChatCardsListing/ChatCardsListing\";\nimport ChatSection from \"./component/ChatSection/ChatSection\";\nimport Login from \"./component/Login/Login\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { BASE_URL, LOGIN, USER, USER_LIST } from \"./utils/apiEndpoints\";\nimport { postRequest, getRequest } from \"./utils/apiRequests\";\nimport AuthContext from \"./context/AuthContext\";\nimport SocketContext from \"./context/SocketContext\";\nimport io from \"socket.io-client\";\nimport friendsListReducer from \"./reducer/friendsListReducer\";\n\nconst initialState = {};\n\nconst socket = io.connect(\"http://localhost:2000\", {\n  reconnection: true,\n  reconnectionDelay: 500,\n  reconnectionAttempts: 10,\n});\n\nfunction App() {\n  const [cookies, setCookie, removeCookie] = useCookies([\"whatsappclone\"]);\n  const [error, setError] = useState(null);\n  const [recentMsg, setRecentMsg] = useState({});\n  const [recentOnlineFriend, setRecentOnlineFriend] = useState({});\n  const [recentOfflineFriend, setRecentOfflineFriend] = useState({});\n  const [userObj, setUserObj] = useState(() => {\n    return cookies.user;\n  });\n\n  const [friendsList, friendsListDispatch] = useReducer(\n    friendsListReducer,\n    initialState\n  );\n\n  useEffect(() => {\n    if (userObj && userObj.sessionId) {\n      joinUser(userObj);\n      getFriendsList(userObj);\n    }\n  }, []);\n\n  const handleLogin = async (userData) => {\n    const formData = new FormData();\n    if (userData.file) {\n      formData.append(\"profileImg\", userData.file, userData.file.name);\n    }\n    formData.append(\"payload\", JSON.stringify({ name: userData.name }));\n    const response = await postRequest(`${BASE_URL}${LOGIN}`, formData);\n    console.log(response);\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    setCookie(\"user\", response);\n    setUserObj(response);\n    joinUser(response);\n    getFriendsList(response);\n  };\n\n  const handleLogout = () => {\n    removeCookie(\"user\");\n    setUserObj(null);\n  };\n\n  const getFriendsList = async (userData) => {\n    const response = await getRequest(\n      `${BASE_URL}${USER_LIST}/${userData.sessionId}`\n    );\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    friendsListDispatch({ type: \"FRIENDS\", payload: response });\n    onlineOfflineUser();\n  };\n\n  const onlineOfflineUser = () => {\n    socket.on(\"new-online-user\", (data) => {\n      friendsListDispatch({ type: \"NEW_FRIEND\", payload: data });\n      setRecentOnlineFriend(data);\n    });\n    socket.on(\"new-offline-user\", (data) => {\n      console.clear();\n      console.log(data);\n      setRecentOfflineFriend(data);\n    });\n  };\n\n  const joinUser = (userData) => {\n    let initData = {\n      createdAt: userData.createdAt,\n      name: userData.name,\n      profileImg: userData.profileImg,\n      sessionId: userData.sessionId,\n      updatedAt: userData.updatedAt,\n      _id: userData._id,\n    };\n\n    socket.emit(\"join-user\", initData, (cbData) => {\n      console.log(\"user joined\");\n    });\n\n    socket.on(\"receive-msg\", (data) => {\n      console.log(data);\n      updateRecentMsg(data);\n      setRecentMsg(data);\n    });\n\n    socket.on(\"user-typing\", (data) => {\n      console.log(data);\n      updateRecentMsg(data);\n    });\n  };\n\n  const updateRecentMsg = (data) => {\n    friendsListDispatch({ type: \"RECENT_MSG\", payload: data });\n  };\n\n  return (\n    <>\n      {!(userObj && userObj.sessionId) ? (\n        <Login handleLogin={handleLogin} />\n      ) : (\n        <AuthContext.Provider value={userObj}>\n          <SocketContext.Provider value={socket}>\n            <div className=\"App\">\n              <Router>\n                <div className=\"left-side\">\n                  <ProfileSection handleLogout={handleLogout} />\n                  <SearchPeople />\n                  <ChatCardsListing friendsList={friendsList} />\n                </div>\n                <Switch>\n                  <Route path=\"/:id\">\n                    <div className=\"right-side\">\n                      <ChatSection\n                        updateRecentMsg={updateRecentMsg}\n                        recentMsg={recentMsg}\n                        recentOnlineFriend={recentOnlineFriend}\n                        recentOfflineFriend={recentOfflineFriend}\n                      />\n                    </div>\n                  </Route>\n                </Switch>\n              </Router>\n            </div>\n          </SocketContext.Provider>\n        </AuthContext.Provider>\n      )}\n    </>\n  );\n}\n\nexport default App;\n",["42","43"],"/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ProfileSection/ProfileSection.js",["44"],"import { useContext } from 'react';\nimport './ProfileSection.scss'\nimport AuthContext from './../../context/AuthContext';\n\nconst ProfileSection = ({handleLogout}) => {\n    const userObj = useContext(AuthContext);\n    const { profileImg, name } = userObj;\n    return (\n        <div className=\"profile-section\">\n            <div className=\"img-container\">\n                <img alt=\"image\" src={profileImg} />\n            </div>\n            {name}\n            <div className=\"action-items\" onClick={handleLogout}>\n                Logout\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileSection;","/home/khushi/Desktop/whatsapp_clone-main/client/src/utils/apiEndpoints.js",[],"/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ChatForm/ChatForm.js",[],"/home/khushi/Desktop/whatsapp_clone-main/client/src/index.js",[],"/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ChatCardsListing/ChatCardsListing.js",["45"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown, faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./ChatCardsListing.scss\";\nimport { shortFormatTime } from \"./../../utils/helper\";\nimport { NavLink } from \"react-router-dom\";\n\nconst ChatCardsListing = ({ friendsList }) => {\n  console.log(friendsList);\n\n  const renderRecentMsg = (data) => {\n    let msg = \"\";\n    if (data.recentMsg && data.recentMsg.msg) {\n      if (data.recentMsg.msg.type === \"message\") {\n        msg = data.recentMsg.msg.value;\n      } else if (data.recentMsg.msg.type === \"file\") {\n        msg = \"Media shared\";\n      } else if (data.recentMsg.msg.type === \"typing\") {\n        msg = <i style={{ color: \"#a7a7a7\" }}>typing</i>;\n      } else {\n        msg = \"\";\n      }\n    }\n    return msg;\n  };\n\n  return (\n    <div className=\"chat-cards-listing\">\n      {Object.keys(friendsList).map((key) => (\n        <NavLink key={key} className=\"note-card\" to={`/${key}`}>\n          <div className=\"card\">\n            <div className=\"img-container\">\n              {friendsList[key].profileImg ? (\n                <img alt=\"image\" src={friendsList[key].profileImg} />\n              ) : (\n                <FontAwesomeIcon className=\"icon-block\" icon={faUser} />\n              )}\n            </div>\n            <div className=\"card-detail\">\n              <h4 className=\"title\">{friendsList[key].name}</h4>\n              <p className=\"desc\">{renderRecentMsg(friendsList[key])}</p>\n            </div>\n            <div className=\"time\">\n              {friendsList[key].recentMsg &&\n                shortFormatTime(friendsList[key].recentMsg.time)}\n            </div>\n            <div className=\"action-btn\">\n              <FontAwesomeIcon icon={faChevronDown} />\n            </div>\n          </div>\n        </NavLink>\n      ))}\n    </div>\n  );\n};\n\nexport default ChatCardsListing;\n","/home/khushi/Desktop/whatsapp_clone-main/client/src/utils/apiRequests.js",[],"/home/khushi/Desktop/whatsapp_clone-main/client/src/context/SocketContext.js",[],{"ruleId":"46","severity":1,"message":"47","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":11,"column":27,"nodeType":"48","messageId":"49","endLine":11,"endColumn":31},{"ruleId":"46","severity":1,"message":"51","line":28,"column":10,"nodeType":"48","messageId":"49","endLine":28,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":46,"column":6,"nodeType":"54","endLine":46,"endColumn":8,"suggestions":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":11,"column":17,"nodeType":"62","endLine":11,"endColumn":53},{"ruleId":"60","severity":1,"message":"61","line":33,"column":17,"nodeType":"62","endLine":33,"endColumn":70},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'USER' is defined but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getFriendsList', 'joinUser', and 'userObj'. Either include them or remove the dependency array.","ArrayExpression",["63"],"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"desc":"66","fix":"67"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getFriendsList, joinUser, userObj]",{"range":"68","text":"69"},[1685,1687],"[getFriendsList, joinUser, userObj]"]