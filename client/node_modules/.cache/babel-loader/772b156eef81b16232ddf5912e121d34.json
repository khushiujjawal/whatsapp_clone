{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ChatSection/ChatSection.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useReducer, useEffect } from \"react\";\nimport ChatHeader from \"./../ChatHeader/ChatHeader\";\nimport Chat from \"./../Chat/Chat\";\nimport AuthContext from \"./../../context/AuthContext\";\nimport SocketContext from \"./../../context/SocketContext\";\nimport ChatForm from \"./../ChatForm/ChatForm\";\nimport chatsReducer from \"./../../reducer/chatsReducer\";\nimport { useParams } from \"react-router-dom\";\nimport { postRequest, getRequest } from \"./../../utils/apiRequests\";\nimport { BASE_URL, CHATS, USER, CHECK_IS_OFFLINE } from \"./../../utils/apiEndpoints\";\nconst initialChatsState = [];\n\nconst ChatSection = ({\n  updateRecentMsg,\n  recentMsg,\n  recentOnlineFriend,\n  recentOfflineFriend\n}) => {\n  _s();\n\n  const userObj = useContext(AuthContext);\n  const socket = useContext(SocketContext);\n  const [error, setError] = useState({});\n  const [friendInfo, setFriendInfo] = useState({});\n  const [isChatLoading, setChatLoading] = useState(false);\n  const [chats, chatsDispatch] = useReducer(chatsReducer, initialChatsState);\n  const params = useParams();\n  const paramId = params.id;\n  useEffect(() => {\n    getFriendInfo();\n    getChats();\n    return () => {\n      chatsDispatch({\n        type: \"RESET_CHATS\",\n        payload: []\n      });\n    };\n  }, [paramId]);\n  useEffect(() => {\n    if (isChatLoading && recentMsg && paramId === recentMsg.senderId) {\n      chatsDispatch({\n        type: \"CHATS\",\n        payload: [recentMsg]\n      });\n    }\n  }, [recentMsg.time]);\n  useEffect(() => {\n    if (paramId === recentOnlineFriend.sessionId) {\n      setFriendInfo({ ...friendInfo,\n        isOnline: true\n      });\n    }\n  }, [recentOnlineFriend]);\n  useEffect(() => {\n    if (paramId === recentOfflineFriend.sessionId) {\n      setFriendInfo({ ...friendInfo,\n        isOnline: false,\n        updatedAt: recentOfflineFriend.time\n      });\n    }\n  }, [recentOfflineFriend]);\n\n  const sendMsg = (value, type, theme) => {\n    socket.emit(\"send-msg\", {\n      senderId: userObj.sessionId,\n      receiverId: paramId,\n      msg: value,\n      type,\n      theme\n    }, cbData => {\n      updateRecentMsg(cbData);\n      chatsDispatch({\n        type: \"CHATS\",\n        payload: [cbData]\n      });\n    });\n  };\n\n  const sendTyping = value => {\n    socket.emit(\"user-typing\", {\n      senderId: userObj.sessionId,\n      receiverId: paramId,\n      msg: value\n    }, cbData => {// console.log(\"typing\")\n    });\n  };\n\n  const getFriendInfo = async () => {\n    const response = await getRequest(`${BASE_URL}${USER}/${paramId}`);\n\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n\n    const userOfflineRes = await checkIfUserOffline(response);\n    let userAvailability = {\n      isOnline: true\n    };\n\n    if (userOfflineRes) {\n      userAvailability.isOnline = false;\n      userAvailability[\"updatedAt\"] = userOfflineRes.time;\n    }\n\n    setFriendInfo({ ...response,\n      ...userAvailability\n    });\n  };\n\n  const getChats = async () => {\n    const response = await postRequest(`${BASE_URL}${CHATS}`, {\n      senderId: userObj.sessionId,\n      receiverId: paramId\n    });\n\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n\n    chatsDispatch({\n      type: \"CHATS\",\n      payload: response\n    });\n    setChatLoading(true);\n  };\n\n  const checkIfUserOffline = async () => {\n    const response = await getRequest(`${BASE_URL}${CHECK_IS_OFFLINE}/${paramId}`);\n\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n\n    return response;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      friendInfo: friendInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      sessionId: paramId,\n      friendName: friendInfo && friendInfo.name,\n      chats: chats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatForm, {\n      sendMsg: sendMsg,\n      sendTyping: sendTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatSection, \"/t9GA2xsQw31wGs8Q/MlkOxHGQo=\", false, function () {\n  return [useParams];\n});\n\n_c = ChatSection;\nexport default ChatSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatSection\");","map":{"version":3,"sources":["/home/khushi/Desktop/whatsapp_clone-main/client/src/component/ChatSection/ChatSection.js"],"names":["useState","useContext","useReducer","useEffect","ChatHeader","Chat","AuthContext","SocketContext","ChatForm","chatsReducer","useParams","postRequest","getRequest","BASE_URL","CHATS","USER","CHECK_IS_OFFLINE","initialChatsState","ChatSection","updateRecentMsg","recentMsg","recentOnlineFriend","recentOfflineFriend","userObj","socket","error","setError","friendInfo","setFriendInfo","isChatLoading","setChatLoading","chats","chatsDispatch","params","paramId","id","getFriendInfo","getChats","type","payload","senderId","time","sessionId","isOnline","updatedAt","sendMsg","value","theme","emit","receiverId","msg","cbData","sendTyping","response","userOfflineRes","checkIfUserOffline","userAvailability","name"],"mappings":"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","sourcesContent":["import { useState, useContext, useReducer, useEffect } from \"react\";\nimport ChatHeader from \"./../ChatHeader/ChatHeader\";\nimport Chat from \"./../Chat/Chat\";\nimport AuthContext from \"./../../context/AuthContext\";\nimport SocketContext from \"./../../context/SocketContext\";\nimport ChatForm from \"./../ChatForm/ChatForm\";\nimport chatsReducer from \"./../../reducer/chatsReducer\";\nimport { useParams } from \"react-router-dom\";\nimport { postRequest, getRequest } from \"./../../utils/apiRequests\";\nimport {\n  BASE_URL,\n  CHATS,\n  USER,\n  CHECK_IS_OFFLINE,\n} from \"./../../utils/apiEndpoints\";\n\nconst initialChatsState = [];\n\nconst ChatSection = ({\n  updateRecentMsg,\n  recentMsg,\n  recentOnlineFriend,\n  recentOfflineFriend,\n}) => {\n  const userObj = useContext(AuthContext);\n  const socket = useContext(SocketContext);\n  const [error, setError] = useState({});\n  const [friendInfo, setFriendInfo] = useState({});\n  const [isChatLoading, setChatLoading] = useState(false);\n  const [chats, chatsDispatch] = useReducer(chatsReducer, initialChatsState);\n  const params = useParams();\n  const paramId = params.id;\n\n  useEffect(() => {\n    getFriendInfo();\n    getChats();\n    return () => {\n      chatsDispatch({ type: \"RESET_CHATS\", payload: [] });\n    };\n  }, [paramId]);\n\n  useEffect(() => {\n    if (isChatLoading && recentMsg && paramId === recentMsg.senderId) {\n      chatsDispatch({ type: \"CHATS\", payload: [recentMsg] });\n    }\n  }, [recentMsg.time]);\n\n  useEffect(() => {\n    if (paramId === recentOnlineFriend.sessionId) {\n      setFriendInfo({ ...friendInfo, isOnline: true });\n    }\n  }, [recentOnlineFriend]);\n\n  useEffect(() => {\n    if (paramId === recentOfflineFriend.sessionId) {\n      setFriendInfo({\n        ...friendInfo,\n        isOnline: false,\n        updatedAt: recentOfflineFriend.time,\n      });\n    }\n  }, [recentOfflineFriend]);\n\n  const sendMsg = (value, type, theme) => {\n    socket.emit(\n      \"send-msg\",\n      {\n        senderId: userObj.sessionId,\n        receiverId: paramId,\n        msg: value,\n        type,\n        theme,\n      },\n      (cbData) => {\n        updateRecentMsg(cbData);\n        chatsDispatch({ type: \"CHATS\", payload: [cbData] });\n      }\n    );\n  };\n\n  const sendTyping = (value) => {\n    socket.emit(\n      \"user-typing\",\n      {\n        senderId: userObj.sessionId,\n        receiverId: paramId,\n        msg: value,\n      },\n      (cbData) => {\n        // console.log(\"typing\")\n      }\n    );\n  };\n\n  const getFriendInfo = async () => {\n    const response = await getRequest(`${BASE_URL}${USER}/${paramId}`);\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    const userOfflineRes = await checkIfUserOffline(response);\n    let userAvailability = {\n      isOnline: true,\n    };\n    if (userOfflineRes) {\n      userAvailability.isOnline = false;\n      userAvailability[\"updatedAt\"] = userOfflineRes.time;\n    }\n    setFriendInfo({ ...response, ...userAvailability });\n  };\n\n  const getChats = async () => {\n    const response = await postRequest(`${BASE_URL}${CHATS}`, {\n      senderId: userObj.sessionId,\n      receiverId: paramId,\n    });\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    chatsDispatch({ type: \"CHATS\", payload: response });\n    setChatLoading(true);\n  };\n\n  const checkIfUserOffline = async () => {\n    const response = await getRequest(\n      `${BASE_URL}${CHECK_IS_OFFLINE}/${paramId}`\n    );\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    return response;\n  };\n\n  return (\n    <>\n      <ChatHeader friendInfo={friendInfo} />\n      <Chat\n        sessionId={paramId}\n        friendName={friendInfo && friendInfo.name}\n        chats={chats}\n      />\n      <ChatForm sendMsg={sendMsg} sendTyping={sendTyping} />\n    </>\n  );\n};\n\nexport default ChatSection;\n"]},"metadata":{},"sourceType":"module"}